// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ch.epfl.psytest.domain;

import ch.epfl.psytest.domain.Slide;
import java.lang.Integer;
import java.lang.Long;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.PersistenceContext;
import javax.persistence.Version;
import org.springframework.transaction.annotation.Transactional;

privileged aspect Slide_Roo_Entity {
    
    declare @type: Slide: @Entity;
    
    @PersistenceContext
    transient EntityManager Slide.entityManager;
    
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "id")
    private Long Slide.id;
    
    @Version
    @Column(name = "version")
    private Integer Slide.version;
    
    public Long Slide.getId() {
        return this.id;
    }
    
    public void Slide.setId(Long id) {
        this.id = id;
    }
    
    public Integer Slide.getVersion() {
        return this.version;
    }
    
    public void Slide.setVersion(Integer version) {
        this.version = version;
    }
    
    @Transactional
    public void Slide.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void Slide.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            Slide attached = Slide.findSlide(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void Slide.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void Slide.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public Slide Slide.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        Slide merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
    public static final EntityManager Slide.entityManager() {
        EntityManager em = new Slide().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long Slide.countSlides() {
        return entityManager().createQuery("SELECT COUNT(o) FROM Slide o", Long.class).getSingleResult();
    }
    
    public static List<Slide> Slide.findAllSlides() {
        return entityManager().createQuery("SELECT o FROM Slide o", Slide.class).getResultList();
    }
    
    public static Slide Slide.findSlide(Long id) {
        if (id == null) return null;
        return entityManager().find(Slide.class, id);
    }
    
    public static List<Slide> Slide.findSlideEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM Slide o", Slide.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
}
